@page "/ide"
@using CodeSubmissionTool.Shared
@inject IJSRuntime JsRuntime
@inject HttpClient HttpClient
@inject NavigationManager NavigationManager


<style>

    .ide-container {
        width: 100%;
        height: 90%;
        max-height: 900px;
        margin: auto;
        display: flex;
        justify-content: center;
        align-items: center;
        background: #134b5f;
        padding: 15px;
        font-family: monospace;
        border-radius: 5px;
    }


    .ide-wrapper {
        height: 100%;
        width: 60%;
        padding: 10px;
    }

    .output-container {
        height: 100%;
        width: 40%;
        padding: 10px;
    }

    .ide {
        width: 100%;
        height: 65%;
        padding: 5px;
        display: flex;
        flex-direction: column;
    }

    .button-container {
        width: 100%;
        height: 5%;
        display: flex;
        justify-content: flex-end;
        align-items: center;
        padding: 10px 5px 10px 0px;
    }

    .question-container {
        width: 100%;
        height: 30%;
        padding: 5px;
    }

    .output, .question {
        width: 100%;
        height: 100%;
        background: #fff;
        border-radius: 5px;
        padding: 10px;
        text-align: justify;
    }

        .question{
            overflow: scroll;
        }

        .control-panel {
            width: 100%;
            height: 10%;
            background: #2187ab;
            padding: 10px;
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 5px;
            color: #fff;
            border-radius: 5px;
        }

    .editor {
        width: 100%;
        height: 90%;
        border-radius: 5px;
    }

    @@media only screen and (max-width: 1200px) {
        .control-panel {
            height: 20%;
        }
        .editor{
            height: 80%;
        }
    }

    @@media only screen and (max-width: 880px) {
        .control-panel {
            flex-direction: column;
            justify-content: center;
            font-size: 12px;
        }

        
    }


</style>


<h1>Nebula - Testing Environment</h1>

<div class="ide-container">

    <div class="ide-wrapper">

        <div class="ide">
            <div class="control-panel">

                <div class="language">
                    Select Language:
                    &nbsp;
                    <select id="languages" class="language" @onchange="changeLanguage">

                        <option value="python">Python</option>
                        <option value="cpp">C++</option>
                        <option value="csharp">C#</option>
                        <option value="java">Java</option>
                        <option value="sql">SQL</option>
                        <option value="javascript">JavaScript</option>

                    </select>
                </div>

                <span>&nbsp; Timer: 00:00:00</span>

            </div>

            <div class="editor" id="editor">
               
            </div>
        </div>

        <div class="button-container">

            <button class="btn btn-success btn-sm" @onclick="executeCode">Run</button>

        </div>

        <div class="question-container">
            <div class="question">
                
                @if (challenge != null)
                {
                    @challenge.Description;
                }

            </div>
        </div>

    </div>

    <div class="output-container">
        <div class="output">
            @if(test != null)
            {
                <p>@test.Code</p>
            }
        </div>
    </div>


</div>


@code {

    Test test = new Test();
    Challenge challenge;
    string el = "test";

    private async Task changeLanguage(ChangeEventArgs e)
    {

        await JsRuntime.InvokeVoidAsync("changeLanguage");

    }

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JsRuntime.InvokeVoidAsync("showEditor");
        }

    }


    private async Task executeCode()
    {
        test.Code = await JsRuntime.InvokeAsync<string>("getCode");
        await HttpClient.PostAsJsonAsync("api/tests/runsql", test);
        //await HttpClient.PostAsJsonAsync("api/tests/runpython", test);

        if (test.Language == "sql")
        {
            await HttpClient.PostAsJsonAsync("api/tests/runsql", test);
        }
        else if (test.Language == "python")
        {
            await HttpClient.PostAsJsonAsync("api/tests/runpython", test);
        }

        //make a roll back transaction

        NavigationManager.NavigateTo("/result");

    }


    protected async override Task OnInitializedAsync()
    {
        //IList<Question> questions = await HttpClient.GetFromJsonAsync<IList<Question>>("api/questions");
        //int idx = new Random().Next(0, questions.Count);
        //question = questions[idx];

        IList<Challenge> challenges = await HttpClient.GetFromJsonAsync<IList<Challenge>>("api/challenges");
        int idx = new Random().Next(0, challenges.Count);
        challenge = challenges[idx];

    }


}
